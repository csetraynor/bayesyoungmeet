rel_base_risk <- lambda/lambda0
rel_risk = lapply(mu, "*" , rel_base_risk)
#caculate duration
if(tau[1] != 0){
tau <- c(0, tau)
}
dt = diff(tau)
assertthat::assert_that(length(dt) == length(lambda))
#create a helping matrix for finding event time
LD <- matrix(0, nrow = length(tau), ncol = length(rel_base_risk))
LD[lower.tri(LD)] <- 1;
#compute log survival
logsurv <- log(1-runif(n))
#compute log survival for each interval tau
lsm = lapply(rel_risk, function(x) -lambda0 * as.vector(LD %*% (x*dt)))
t <- (rep(NA,n))
#find appropiate time interval
t = mapply(function(x, y, z) {
for (i in seq_along(lambda)) {
t = ifelse(x[i]>=z & z>x[i+1], tau[i] + (x[i] - z)/lambda0/y[i], t)
}
return(t)
} , x = lsm, y = rel_risk , z = as.list(logsurv)
)
#create data set
sim.data <- data_frame(surv_months = t) %>%
mutate(os_status = ifelse(is.na(surv_months), 'LIVING', 'DECEASED'),
surv_months = ifelse(is.na(surv_months), tau[length(tau)], surv_months),
id = seq(n),
censor_months = rexp(n = n, rate = 1/100))   %>% #censoring rate
dplyr::mutate(os_status = ifelse(surv_months < censor_months & os_status != 'LIVING',
'DECEASED', 'LIVING'
),
os_months = ifelse(surv_months < censor_months  & os_status != 'LIVING',
surv_months, censor_months
)
) %>%   cbind(X) #joint covariates
return(sim.data)
}
pl <- pp_predict_surv(pp_beta = pp_beta,
pp_lambda = pp_baseline,
n = nrow(clinical_data),
tau = clinical_data %>% select(os_months) %>% unlist %>% unique %>% sort(),
X = X,
level = 0.9,
plot = F, data = NULL)
pem_sim_data <- function(n, tau, beta, lambda, X, ...){
#format check
beta <- as.vector(as.numeric(beta))
lambda<- as.vector(as.numeric(lambda))
print(lambda)
print(tau)
X <- array(matrix(as.numeric(X)), dim = c(n, length(beta)))
#prognostic index
mu = exp (X %*% beta )
#extract first interval baseline hazard
lambda0 <- lambda[1]
#compute relative hazard for each interval respect to the first
rel_base_risk <- lambda/lambda0
rel_risk = lapply(mu, "*" , rel_base_risk)
#caculate duration
if(tau[1] != 0){
tau <- c(0, tau)
}
dt = diff(tau)
assertthat::assert_that(length(dt) == length(lambda))
#create a helping matrix for finding event time
LD <- matrix(0, nrow = length(tau), ncol = length(rel_base_risk))
LD[lower.tri(LD)] <- 1;
#compute log survival
logsurv <- log(1-runif(n))
#compute log survival for each interval tau
lsm = lapply(rel_risk, function(x) -lambda0 * as.vector(LD %*% (x*dt)))
t <- (rep(NA,n))
#find appropiate time interval
t = mapply(function(x, y, z) {
for (i in seq_along(lambda)) {
t = ifelse(x[i]>=z & z>x[i+1], tau[i] + (x[i] - z)/lambda0/y[i], t)
}
return(t)
} , x = lsm, y = rel_risk , z = as.list(logsurv)
)
#create data set
sim.data <- data_frame(surv_months = t) %>%
mutate(os_status = ifelse(is.na(surv_months), 'LIVING', 'DECEASED'),
surv_months = ifelse(is.na(surv_months), tau[length(tau)], surv_months),
id = seq(n),
censor_months = rexp(n = n, rate = 1/100))   %>% #censoring rate
dplyr::mutate(os_status = ifelse(surv_months < censor_months & os_status != 'LIVING',
'DECEASED', 'LIVING'
),
os_months = ifelse(surv_months < censor_months  & os_status != 'LIVING',
surv_months, censor_months
)
) %>%   cbind(X) #joint covariates
return(sim.data)
}
pl <- pp_predict_surv(pp_beta = pp_beta,
pp_lambda = pp_baseline,
n = nrow(clinical_data),
tau = clinical_data %>% select(os_months) %>% unlist %>% unique %>% sort(),
X = X,
level = 0.9,
plot = F, data = NULL)
pp_baseline[[1]]
pp_predict_surv <- function(pp_beta, pp_lambda, n, tau, X,
level = 0.9,
plot = F, data = NULL,
sim_data_fun = pem_sim_data) {
pp_newdata <-
purrr::pmap(list(pp_lambda, pp_beta),
function(a, b) {pem_sim_data(lambda = a,
beta = b,
tau = tau,
n = n,
X = X)} )
pp_survdata <-
pp_newdata %>%
purrr::map(~ dplyr::mutate(., os_deceased = os_status == 'DECEASED')) %>%
purrr::map(~ survival::survfit(Surv(os_months, os_deceased) ~ 1, data = .)) %>%
purrr::map(fortify)
## compute quantiles given level
lower_p <- 0 + ((1 - level)/2)
upper_p <- 1 - ((1 - level)/2)
pp_survdata_agg <-
pp_survdata %>%
purrr::map(~ dplyr::mutate(.,
time_group = floor(time))) %>%
dplyr::bind_rows() %>%
dplyr::group_by(time_group) %>%
dplyr::summarize(surv_mean = mean(surv)
, surv_p50 = median(surv)
, surv_lower = quantile(surv,
probs = lower_p)
, surv_upper = quantile(surv,
probs = upper_p) ) %>%
dplyr::ungroup()
if (plot == FALSE) {
return(pp_survdata_agg)
}
ggplot_data <- pp_survdata_agg %>%
dplyr::mutate(type = 'posterior predicted values') %>%
dplyr::rename(surv = surv_p50,
lower = surv_lower,
upper = surv_upper, time = time_group)
if (!is.null(data))
ggplot_data <-
ggplot_data %>%
bind_rows(
fortify(
survival::survfit(
Surv(os_months, os_deceased) ~ 1,
data = data %>%
dplyr::mutate(
os_deceased = os_status == 'DECEASED') )) %>%
dplyr::mutate(lower = surv,
upper = surv, type = 'actual data') )
pl <- ggplot(ggplot_data,
aes(x = time, group = type, linetype = type)) +
geom_line(aes(y = surv, colour = type)) +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2)
pl
}
pem_sim_data <- function(n, tau, beta, lambda, X, ...){
#format check
beta <- as.vector(as.numeric(beta))
lambda<- as.vector(as.numeric(lambda))
X <- array(matrix(as.numeric(X)), dim = c(n, length(beta)))
#prognostic index
mu = exp (X %*% beta )
#extract first interval baseline hazard
lambda0 <- lambda[1]
#compute relative hazard for each interval respect to the first
rel_base_risk <- lambda/lambda0
rel_risk = lapply(mu, "*" , rel_base_risk)
#caculate duration
if(tau[1] != 0){
tau <- c(0, tau)
}
dt = diff(tau)
assertthat::assert_that(length(dt) == length(lambda))
#create a helping matrix for finding event time
LD <- matrix(0, nrow = length(tau), ncol = length(rel_base_risk))
LD[lower.tri(LD)] <- 1;
#compute log survival
logsurv <- log(1-runif(n))
#compute log survival for each interval tau
lsm = lapply(rel_risk, function(x) -lambda0 * as.vector(LD %*% (x*dt)))
t <- (rep(NA,n))
#find appropiate time interval
t = mapply(function(x, y, z) {
for (i in seq_along(lambda)) {
t = ifelse(x[i]>=z & z>x[i+1], tau[i] + (x[i] - z)/lambda0/y[i], t)
}
return(t)
} , x = lsm, y = rel_risk , z = as.list(logsurv)
)
#create data set
sim.data <- data_frame(surv_months = t) %>%
mutate(os_status = ifelse(is.na(surv_months), 'LIVING', 'DECEASED'),
surv_months = ifelse(is.na(surv_months), tau[length(tau)], surv_months),
id = seq(n),
censor_months = rexp(n = n, rate = 1/100))   %>% #censoring rate
dplyr::mutate(os_status = ifelse(surv_months < censor_months & os_status != 'LIVING',
'DECEASED', 'LIVING'
),
os_months = ifelse(surv_months < censor_months  & os_status != 'LIVING',
surv_months, censor_months
)
) %>%   cbind(X) #joint covariates
return(sim.data)
}
pl <- pp_predict_surv(pp_beta = pp_beta,
pp_lambda = pp_baseline,
n = nrow(clinical_data),
tau = clinical_data %>% select(os_months) %>% unlist %>% unique %>% sort(),
X = X,
level = 0.9,
plot = F, data = NULL)
pl +
xlim(NA, 250) +
ggtitle('Posterior predictive checks for NULL weibull model\nfit to GBC 2008 historical cohort; showing 90% CI')
pl <- pp_predict_surv(pp_beta = pp_beta,
pp_lambda = pp_baseline,
n = nrow(clinical_data),
tau = clinical_data %>% select(os_months) %>% unlist %>% unique %>% sort(),
X = X,
level = 0.9,
plot = T, data = NULL)
pl +
xlim(NA, 250) +
ggtitle('Posterior predictive checks for NULL weibull model\nfit to GBC 2008 historical cohort; showing 90% CI')
pl +
xlim(NA, 250) +
ggtitle('Posterior predictive checks \nfit to GBC 2008 historical cohort; showing 90% CI')
pl <- pp_predict_surv(pp_beta = pp_beta,
pp_lambda = pp_baseline,
n = nrow(clinical_data),
tau = clinical_data %>% select(os_months) %>% unlist %>% unique %>% sort(),
X = X,
level = 0.9,
plot = T,
data = clinical_data)
pl +
xlim(NA, 250) +
ggtitle('Posterior predictive checks \nfit to GBC 2008 historical cohort; showing 90% CI')
autoplot(survival::survfit(Surv(os_months, os_deceased) ~ discrete,
data = sim_data
), conf.int = F) +
ggtitle('Simulated KM curve')
autoplot(survival::survfit(Surv(os_months, os_deceased) ~ 1,
data = sim_data
), conf.int = F) +
ggtitle('Simulated KM curve')
#----Load libraries---#
library(purrr)
library(httr)
library(readr)
library(survival)
library(rstan)
library(spBayesSurv)
library(pracma)
library(assertthat)
library(cgdsr)
suppressMessages(library(dplyr))
library(ggplot2)
require(ggfortify)
theme_set(theme_bw())
library(VIM)
#---Download Data----#
mycgds = CGDS("http://www.cbioportal.org/public-portal/")
study_list = getCancerStudies(mycgds)
id_sutdy = getCancerStudies(mycgds)[56,1]
case_list = getCaseLists(mycgds, id_sutdy)[2,1]
clinical_data <-  tbl_df(getClinicalData(mycgds, case_list))
#---- Data Cleaning ----#
clinical_data <- clinical_data %>% tibble::rownames_to_column("sample_id")
clinical_data <- clinical_data %>% tibble::rownames_to_column("num_id")
names(clinical_data) <- tolower(names(clinical_data))
#convert missig values into NA
convert_blank_to_na <- function(x) {
if(!purrr::is_character(x)){
warning('input variate not character - return original')
return(x)
} else {
ifelse(x == '', NA, x)
}
}
clinical_data <- clinical_data %>%
dplyr::mutate_all(funs(convert_blank_to_na))
#--Missing Data ---#
clinical_data %>%
VIM::aggr(prop = FALSE, combined = TRUE, numbers = TRUE, sortVars = TRUE, sortCombs = TRUE)
clinical_data %>%
filter(is.na(os_status) | os_status == "") %>%
select(os_months, os_status) %>%
glimpse
clinical_data %>%
filter(is.na(os_status) | os_status == "" |os_months < 0 | is.na(os_months)) %>%
select(os_months, os_status) %>%
glimpse
table(clinical_data$treatment_status)
table(clinical_data$pretreatment_history)
table(clinical_data$pior_glioma)
table(clinical_data$prior_glioma)
table(clinical_data$karnofsky_performance_score)
class(clinical_data$karnofsky_performance_score)
class(clinical_data$acgh_data)
table(clinical_data$acgh_data)
clinical_data %>%
ggplot(aes(x = os_months,
group = os_status,
colour = os_status,
fill = os_status)) +
geom_density(alpha = 0.5)
mle.surv <- survfit(Surv(os_months, os_deceased) ~ treatment_status,
data = clinical_data %>%
mutate(os_deceased = (os_status == "DECEASED")))
require(ggfortify)
ggplot2::autoplot(mle.surv, conf.int = F) +
ggtitle('KM survival for GGM Cohort')
mle.surv <- survfit(Surv(os_months, os_deceased) ~ sex,
data = clinical_data %>%
mutate(os_deceased = (os_status == "DECEASED")))
require(ggfortify)
ggplot2::autoplot(mle.surv, conf.int = F) +
ggtitle('KM survival for GGM Cohort')
mle.surv <- survfit(Surv(os_months, os_deceased) ~ karnofsky_performance_score,
data = clinical_data %>%
mutate(os_deceased = (os_status == "DECEASED")))
require(ggfortify)
ggplot2::autoplot(mle.surv, conf.int = F) +
ggtitle('KM survival for GGM Cohort')
clinical_data <- clinical_data %>%
filter(!is.na(karnofsky_performance_score)) %>% #clean data
select(karnofsky_performance_score, os_months, os_status)
clinical_data$karnofsky_performance_score <- as.factor(clinical_data$karnofsky_performance_score)
Xdummies <- dummyVars(Surv(os_months, os_deceased) ~ karnofsky_performance_score,
data =  clinical_data %>%
mutate(os_deceased = (os_status == "DECEASED")))
library(caret)
caret::Xdummies <- dummyVars(Surv(os_months, os_deceased) ~ karnofsky_performance_score,
data =  clinical_data %>%
mutate(os_deceased = (os_status == "DECEASED")))
Xdummies <- dummyVars(Surv(os_months, os_deceased) ~ karnofsky_performance_score,
data =  clinical_data %>%
mutate(os_deceased = (os_status == "DECEASED")))
Xdummies <- caret::dummyVars(Surv(os_months, os_deceased) ~ karnofsky_performance_score,
data =  clinical_data %>%
mutate(os_deceased = (os_status == "DECEASED")))
X <- tbl_df(caret::predict(Xdummies, newdata =  clinical_data %>%
mutate(os_deceased = (os_status == "DECEASED"))))
X <- tbl_df(predict(Xdummies, newdata =  clinical_data %>%
mutate(os_deceased = (os_status == "DECEASED"))))
?predict
head(X)
X <- tbl_df(as.integer(predict(Xdummies, newdata =  clinical_data %>%
mutate(os_deceased = (os_status == "DECEASED")))))
X
X <- tbl_df(predict(Xdummies, newdata =  clinical_data %>%
mutate(os_deceased = (os_status == "DECEASED"))))
X
nzv <- caret::nearZeroVar(X, saveMetrics= TRUE)
nzv[nzv$nzv,]
X <- X %>% mutate(kpsless60 = (karnofsky_performance_score.40 | karnofsky_performance_score.60)) %>%
rename(kps80 = karnofsky_performance_score.80, kps100 = karnofsky_performance_score.100) %>%
select(-karnofsky_performance_score.40, -karnofsky_performance_score.60)
X
X <- X %>% mutate(kpsless60 = (karnofsky_performance_score.40 | karnofsky_performance_score.60)) %>%
rename(kps80 = karnofsky_performance_score.80, kps100 = karnofsky_performance_score.100) %>%
select(-karnofsky_performance_score.40, -karnofsky_performance_score.60) %>%
mutate_all(fun = as.integer())
X <- tbl_df(predict(Xdummies, newdata =  clinical_data %>%
mutate(os_deceased = (os_status == "DECEASED"))))
#Near Zero Variance Predictors
nzv <- caret::nearZeroVar(X, saveMetrics= TRUE)
nzv[nzv$nzv,]
#joint covariates lower than 60
X <- X %>% mutate(kpsless60 = (karnofsky_performance_score.40 | karnofsky_performance_score.60)) %>%
rename(kps80 = karnofsky_performance_score.80, kps100 = karnofsky_performance_score.100) %>%
select(-karnofsky_performance_score.40, -karnofsky_performance_score.60) %>%
mutate_all(fun = as.integer())
?mutate_all
X <- X %>% mutate(kpsless60 = (karnofsky_performance_score.40 | karnofsky_performance_score.60)) %>%
rename(kps80 = karnofsky_performance_score.80, kps100 = karnofsky_performance_score.100) %>%
select(-karnofsky_performance_score.40, -karnofsky_performance_score.60) %>%
mutate_all(funs(as.integer))
X
X <- tbl_df(predict(Xdummies, newdata =  clinical_data %>%
mutate(os_deceased = (os_status == "DECEASED"))))
#Near Zero Variance Predictors
nzv <- caret::nearZeroVar(X, saveMetrics= TRUE)
nzv[nzv$nzv,]
#joint covariates lower than 60
X <- X %>% mutate(kpsless_or60 = (karnofsky_performance_score.40 | karnofsky_performance_score.60)) %>%
rename(kps80 = karnofsky_performance_score.80, kps100 = karnofsky_performance_score.100) %>%
select(-karnofsky_performance_score.40, -karnofsky_performance_score.60) %>%
mutate_all(funs(as.integer))
nzv <- caret::nearZeroVar(X, saveMetrics= TRUE)
nzv[nzv$nzv,]
nChain <- 1
stanfile <- 'pem_bg.stan'
rstan_options(auto_write = TRUE)
pem_fit <- stan(stanfile,
data = gen_stan_data(clinical_data, '~ kps100 + kps80 + kpsless_or60'),
init = gen_inits(M=3),
iter = 400,
cores = min(nChain, parallel::detectCores()),
seed = 7327,
chains = nChain,
#control = list(adapt_delta = 0.99, max_treedepth = 15)
pars = c("beta_bg", "baseline", "lp__"))
gen_stan_data <- function(data, formula = as.formula(~1)) {
if(!inherits(formula, 'formula'))
formula <- as.formula(formula)
#set the tau interval times
tau <- data %>% select(os_months) %>% unlist %>% unique %>% sort()
if(tau[1] != 0){
tau <- c(0, tau)
}
longdata <- survival::survSplit(Surv(time = os_months, event = deceased) ~ . ,
cut = tau, data = (data %>%
mutate(deceased = os_status == "DECEASED")))
#create time point id
longdata <- longdata %>%
group_by(sample_id) %>%
mutate(t_id = seq(n())) %>%
ungroup()
t_obs <- data %>% select(os_months) %>% unlist %>% unique %>% sort()
t_dur <- diff(tau)
X_bg <- longdata %>%
model.matrix(formula, data = .)
M_bg <- ncol(X_bg)
if (M_bg > 1){
if("(Intercept)" %in% colnames(X_bg))
X_bg <- array(X_bg[,-1], dim = c(nrow(longdata), M_bg - 1))
M_bg <- ncol(X_bg)
}
stan_data <- list(
N = nrow(longdata),
S = length(unique(longdata$num_id)),
"T" = dplyr::n_distinct(longdata$t_id),
s = as.integer(longdata$num_id),
t_obs = t_obs,
t_dur = t_dur,
M=M,
event = as.integer(longdata$deceased),
t = longdata$t_id,
x = X_bg
)
}
#---Set initial values---#
gen_inits <-  function(M) {
function()
list(
beta_bg_raw = array(rnorm(M), dim =M),
tau_s_bg_raw = 0.1*abs(rnorm(1)),
tau_bg_raw = array(abs(rnorm(M)), dim = M),
c_raw = abs(rnorm(1)),
r_raw = abs(rnorm(1)),
baseline = rgamma(n = length(diff(tau)), shape =  mean(diff(tau)) * 0.1, scale = 0.01)
)
}
pem_sim_data <- function(n, tau, beta, lambda, X, ...){
#format check
beta <- as.vector(as.numeric(beta))
lambda<- as.vector(as.numeric(lambda))
X <- array(matrix(as.numeric(X)), dim = c(n, length(beta)))
#prognostic index
mu = exp (X %*% beta )
#extract first interval baseline hazard
lambda0 <- lambda[1]
#compute relative hazard for each interval respect to the first
rel_base_risk <- lambda/lambda0
rel_risk = lapply(mu, "*" , rel_base_risk)
#caculate duration
if(tau[1] != 0){
tau <- c(0, tau)
}
dt = diff(tau)
assertthat::assert_that(length(dt) == length(lambda))
#create a helping matrix for finding event time
LD <- matrix(0, nrow = length(tau), ncol = length(rel_base_risk))
LD[lower.tri(LD)] <- 1;
#compute log survival
logsurv <- log(1-runif(n))
#compute log survival for each interval tau
lsm = lapply(rel_risk, function(x) -lambda0 * as.vector(LD %*% (x*dt)))
t <- (rep(NA,n))
#find appropiate time interval
t = mapply(function(x, y, z) {
for (i in seq_along(lambda)) {
t = ifelse(x[i]>=z & z>x[i+1], tau[i] + (x[i] - z)/lambda0/y[i], t)
}
return(t)
} , x = lsm, y = rel_risk , z = as.list(logsurv)
)
#create data set
sim.data <- data_frame(surv_months = t) %>%
mutate(os_status = ifelse(is.na(surv_months), 'LIVING', 'DECEASED'),
surv_months = ifelse(is.na(surv_months), tau[length(tau)], surv_months),
id = seq(n),
censor_months = rexp(n = n, rate = 1/100))   %>% #censoring rate
dplyr::mutate(os_status = ifelse(surv_months < censor_months & os_status != 'LIVING',
'DECEASED', 'LIVING'
),
os_months = ifelse(surv_months < censor_months  & os_status != 'LIVING',
surv_months, censor_months
)
) %>%   cbind(X) #joint covariates
return(sim.data)
}
