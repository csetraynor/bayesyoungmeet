#create a helping matrix
LD <- matrix(0, nrow = length(tau), ncol = length(rel_base_risk))
LD[lower.tri(LD)] <- 1;
#compute log survival
logsurv <- log(1-runif(n))
#compute log survival for each interval tau
lsm = lapply(rel_risk, function(x) -lambda0 * as.vector(LD %*% (x*dt)))
t <- (rep(NA,100))
#find appropiate time interval
t = mapply(function(x, y, z) {
for (i in seq_along(lambda)) {
t = ifelse(x[i]>=z & z>x[i+1], tau[i] + (x[i] - z)/lambda0/y[i], t)
}
return(t)
} , x = lsm, y = rel_risk , z = as.list(logsurv)
)
sim.data <- data_frame(surv_months = t) %>%
mutate(os_status = ifelse(is.na(surv_months), 'LIVING', 'DECEASED'),
surv_months = ifelse(is.na(surv_months), tau[length(tau)], surv_months),
id = seq(n),
censor_months = rexp(n = n, rate = 1/100))%>%
dplyr::mutate(os_status = ifelse(surv_months < censor_months & os_status != 'LIVING',
'DECEASED', 'LIVING'
),
os_months = ifelse(surv_months < censor_months  & os_status != 'LIVING',
surv_months, censor_months
)
) %>%   cbind(X) %>%
rename("continuos" = "1", "discrete" = "2")
return(sim.data)
}
set.seed(342)
test_n = 100
tau = c(seq(0, 900, length.out = test_n))
test_baseline <- exp(-3)*runif(test_n , 0, 1)
X = matrix(c(rnorm(100), sample(c(0,1), 100, replace = T)), ncol=2)
beta = c(1.5, -2)
sim_data <-  pem_sim_data( beta = beta,
X = X,
tau = tau,
lambda = test_baseline,
n = test_n
)
## plot KM curve from simulated data
sim_data <-
sim_data %>%
dplyr::mutate(os_deceased = os_status == 'DECEASED')
autoplot(survival::survfit(Surv(os_months, os_deceased) ~ 1,
data = sim_data
), conf.int = F) +
ggtitle('Simulated KM curve')
set.seed(342)
test_n = 100
tau = c(seq(0, 900, length.out = test_n))
test_baseline <- exp(-1)*runif(test_n , 0, 1)
X = matrix(c(rnorm(100), sample(c(0,1), 100, replace = T)), ncol=2)
beta = c(1.5, -2)
sim_data <-  pem_sim_data( beta = beta,
X = X,
tau = tau,
lambda = test_baseline,
n = test_n
)
## plot KM curve from simulated data
sim_data <-
sim_data %>%
dplyr::mutate(os_deceased = os_status == 'DECEASED')
autoplot(survival::survfit(Surv(os_months, os_deceased) ~ 1,
data = sim_data
), conf.int = F) +
ggtitle('Simulated KM curve')
set.seed(342)
test_n = 100
tau = c(seq(0, 900, length.out = test_n))
test_baseline <- exp(-5)*runif(test_n , 0, 1)
X = matrix(c(rnorm(100), sample(c(0,1), 100, replace = T)), ncol=2)
beta = c(1.5, -2)
sim_data <-  pem_sim_data( beta = beta,
X = X,
tau = tau,
lambda = test_baseline,
n = test_n
)
## plot KM curve from simulated data
sim_data <-
sim_data %>%
dplyr::mutate(os_deceased = os_status == 'DECEASED')
autoplot(survival::survfit(Surv(os_months, os_deceased) ~ 1,
data = sim_data
), conf.int = F) +
ggtitle('Simulated KM curve')
sim_data
beta <- as.vector(as.numeric(beta))
lambda<- as.vector(as.numeric(lambda))
X <- array(matrix(as.numeric(X)), dim = c(n, length(beta)))
#prognostic index
mu = exp (X %*% beta )
#extract first interval baseline hazard
lambda0 <- lambda[1]
#compute relative hazard for each interval respect to the first
rel_base_risk <- lambda/lambda0
rel_risk = lapply(mu, "*" , rel_base_risk)
#caculate duration
if(tau[1] == 0){
dt <- diff(c(tau, Inf))
} else {
dt <- diff(c(0, tau, Inf))
}
assertthat::assert_that(length(dt) == length(lambda))
#create a helping matrix
LD <- matrix(0, nrow = length(tau), ncol = length(rel_base_risk))
LD[lower.tri(LD)] <- 1;
#compute log survival
logsurv <- log(1-runif(n))
#compute log survival for each interval tau
lsm = lapply(rel_risk, function(x) -lambda0 * as.vector(LD %*% (x*dt)))
t <- (rep(NA,100))
#find appropiate time interval
t = mapply(function(x, y, z) {
for (i in seq_along(lambda)) {
t = ifelse(x[i]>=z & z>x[i+1], tau[i] + (x[i] - z)/lambda0/y[i], t)
}
return(t)
} , x = lsm, y = rel_risk , z = as.list(logsurv)
)
t
test_baseline <- exp(-3)*runif(test_n , 0, 1)
beta <- as.vector(as.numeric(beta))
lambda<- as.vector(as.numeric(lambda))
X <- array(matrix(as.numeric(X)), dim = c(n, length(beta)))
#prognostic index
mu = exp (X %*% beta )
#extract first interval baseline hazard
lambda0 <- lambda[1]
#compute relative hazard for each interval respect to the first
rel_base_risk <- lambda/lambda0
rel_risk = lapply(mu, "*" , rel_base_risk)
#caculate duration
if(tau[1] == 0){
dt <- diff(c(tau, Inf))
} else {
dt <- diff(c(0, tau, Inf))
}
assertthat::assert_that(length(dt) == length(lambda))
#create a helping matrix
LD <- matrix(0, nrow = length(tau), ncol = length(rel_base_risk))
LD[lower.tri(LD)] <- 1;
#compute log survival
logsurv <- log(1-runif(n))
#compute log survival for each interval tau
lsm = lapply(rel_risk, function(x) -lambda0 * as.vector(LD %*% (x*dt)))
t <- (rep(NA,100))
#find appropiate time interval
t = mapply(function(x, y, z) {
for (i in seq_along(lambda)) {
t = ifelse(x[i]>=z & z>x[i+1], tau[i] + (x[i] - z)/lambda0/y[i], t)
}
return(t)
} , x = lsm, y = rel_risk , z = as.list(logsurv)
)
t
test_baseline <- exp(-2)*runif(test_n , 0, 1)
beta <- as.vector(as.numeric(beta))
lambda<- as.vector(as.numeric(lambda))
X <- array(matrix(as.numeric(X)), dim = c(n, length(beta)))
#prognostic index
mu = exp (X %*% beta )
#extract first interval baseline hazard
lambda0 <- lambda[1]
#compute relative hazard for each interval respect to the first
rel_base_risk <- lambda/lambda0
rel_risk = lapply(mu, "*" , rel_base_risk)
#caculate duration
if(tau[1] == 0){
dt <- diff(c(tau, Inf))
} else {
dt <- diff(c(0, tau, Inf))
}
assertthat::assert_that(length(dt) == length(lambda))
#create a helping matrix
LD <- matrix(0, nrow = length(tau), ncol = length(rel_base_risk))
LD[lower.tri(LD)] <- 1;
#compute log survival
logsurv <- log(1-runif(n))
#compute log survival for each interval tau
lsm = lapply(rel_risk, function(x) -lambda0 * as.vector(LD %*% (x*dt)))
t <- (rep(NA,100))
#find appropiate time interval
t = mapply(function(x, y, z) {
for (i in seq_along(lambda)) {
t = ifelse(x[i]>=z & z>x[i+1], tau[i] + (x[i] - z)/lambda0/y[i], t)
}
return(t)
} , x = lsm, y = rel_risk , z = as.list(logsurv)
)
t
set.seed(342)
test_n = 100
# tau = c(seq(0, 900, length.out = test_n))
# test_baseline <- exp(-3)*runif(test_n , 0, 1)
tau = c(seq(0, 300, by = 90), seq(300, 900, by = 100))
test_baseline <- exp(-3)*rev(seq(0.1, 1, by = 0.1))
X = matrix(c(rnorm(100), sample(c(0,1), 100, replace = T)), ncol=2)
beta = c(1.5, -2)
sim_data <-  pem_sim_data( beta = beta,
X = X,
tau = tau,
lambda = test_baseline,
n = test_n
)
if(tau[1] == 0){
dt <- diff(c(tau, Inf))
} else {
dt <- diff(c(0, tau, Inf))
}
length(tau)
length(lambda)
exp(-3)*rev(seq(0.1, 1, by = 0.1))
test_baseline <- exp(-3)*rev(seq(0.1, 1, by = 0.1))
length(test_baseline)
tau
set.seed(342)
test_n = 100
# tau = c(seq(0, 900, length.out = test_n))
# test_baseline <- exp(-3)*runif(test_n , 0, 1)
tau = c(seq(0, 300, by = 90), seq(300, 1000, by = 100))
test_baseline <- exp(-3)*rev(seq(0.1, 1, by = 0.1))
X = matrix(c(rnorm(100), sample(c(0,1), 100, replace = T)), ncol=2)
beta = c(1.5, -2)
sim_data <-  pem_sim_data( beta = beta,
X = X,
tau = tau,
lambda = test_baseline,
n = test_n
)
length(test_baseline)
set.seed(342)
test_n = 100
# tau = c(seq(0, 900, length.out = test_n))
# test_baseline <- exp(-3)*runif(test_n , 0, 1)
tau = c(seq(0, 300, by = 90), seq(300, 800, by = 100))
test_baseline <- exp(-3)*rev(seq(0.1, 1, by = 0.1))
X = matrix(c(rnorm(100), sample(c(0,1), 100, replace = T)), ncol=2)
beta = c(1.5, -2)
sim_data <-  pem_sim_data( beta = beta,
X = X,
tau = tau,
lambda = test_baseline,
n = test_n
)
## plot KM curve from simulated data
sim_data <-
sim_data %>%
dplyr::mutate(os_deceased = os_status == 'DECEASED')
autoplot(survival::survfit(Surv(os_months, os_deceased) ~ 1,
data = sim_data
), conf.int = F) +
ggtitle('Simulated KM curve')
lambda = test_baseline
#format check
beta <- as.vector(as.numeric(beta))
lambda<- as.vector(as.numeric(lambda))
X <- array(matrix(as.numeric(X)), dim = c(n, length(beta)))
#prognostic index
mu = exp (X %*% beta )
#extract first interval baseline hazard
lambda0 <- lambda[1]
#compute relative hazard for each interval respect to the first
rel_base_risk <- lambda/lambda0
rel_risk = lapply(mu, "*" , rel_base_risk)
#caculate duration
if(tau[1] == 0){
dt <- diff(c(tau, Inf))
} else {
dt <- diff(c(0, tau, Inf))
}
assertthat::assert_that(length(dt) == length(lambda))
#create a helping matrix
LD <- matrix(0, nrow = length(tau), ncol = length(rel_base_risk))
LD[lower.tri(LD)] <- 1;
#compute log survival
logsurv <- log(1-runif(n))
#compute log survival for each interval tau
lsm = lapply(rel_risk, function(x) -lambda0 * as.vector(LD %*% (x*dt)))
t <- (rep(NA,100))
#find appropiate time interval
t = mapply(function(x, y, z) {
for (i in seq_along(lambda)) {
t = ifelse(x[i]>=z & z>x[i+1], tau[i] + (x[i] - z)/lambda0/y[i], t)
}
return(t)
} , x = lsm, y = rel_risk , z = as.list(logsurv)
)
t
tau
lambda
lambda0
rel_base_risk
set.seed(342)
test_n = 100
# tau = c(seq(0, 900, length.out = test_n))
# test_baseline <- exp(-3)*runif(test_n , 0, 1)
tau = c(seq(0, 300, by = 90), seq(300, 800, by = 100))
test_baseline <- exp(2)*rev(seq(0.1, 1, by = 0.1))
X = matrix(c(rnorm(100), sample(c(0,1), 100, replace = T)), ncol=2)
beta = c(1.5, -2)
sim_data <-  pem_sim_data( beta = beta,
X = X,
tau = tau,
lambda = test_baseline,
n = test_n
)
## plot KM curve from simulated data
sim_data <-
sim_data %>%
dplyr::mutate(os_deceased = os_status == 'DECEASED')
autoplot(survival::survfit(Surv(os_months, os_deceased) ~ 1,
data = sim_data
), conf.int = F) +
ggtitle('Simulated KM curve')
set.seed(342)
test_n = 100
# tau = c(seq(0, 900, length.out = test_n))
# test_baseline <- exp(-3)*runif(test_n , 0, 1)
tau = c(seq(0, 300, by = 90), seq(300, 800, by = 100))
test_baseline <- exp(-5)*rev(seq(0.1, 1, by = 0.1))
X = matrix(c(rnorm(100), sample(c(0,1), 100, replace = T)), ncol=2)
beta = c(1.5, -2)
sim_data <-  pem_sim_data( beta = beta,
X = X,
tau = tau,
lambda = test_baseline,
n = test_n
)
## plot KM curve from simulated data
sim_data <-
sim_data %>%
dplyr::mutate(os_deceased = os_status == 'DECEASED')
autoplot(survival::survfit(Surv(os_months, os_deceased) ~ 1,
data = sim_data
), conf.int = F) +
ggtitle('Simulated KM curve')
t
logsurv
lsm
X
LD
d
rel_risk*dt
dt
#format check
beta <- as.vector(as.numeric(beta))
lambda<- as.vector(as.numeric(lambda))
X <- array(matrix(as.numeric(X)), dim = c(n, length(beta)))
#prognostic index
mu = exp (X %*% beta )
#extract first interval baseline hazard
lambda0 <- lambda[1]
#compute relative hazard for each interval respect to the first
rel_base_risk <- lambda/lambda0
rel_risk = lapply(mu, "*" , rel_base_risk)
#caculate duration
if(tau[1] == 0){
dt <- diff(c(tau, 10^10))
} else {
dt <- diff(c(0, tau, 10^10))
}
assertthat::assert_that(length(dt) == length(lambda))
#create a helping matrix
LD <- matrix(0, nrow = length(tau), ncol = length(rel_base_risk))
LD[lower.tri(LD)] <- 1;
#compute log survival
logsurv <- log(1-runif(n))
#compute log survival for each interval tau
lsm = lapply(rel_risk, function(x) -lambda0 * as.vector(LD %*% (x*dt)))
lsm
100*12
pem_sim_data <- function(n, tau, beta, lambda, X, ...){
#format check
beta <- as.vector(as.numeric(beta))
lambda<- as.vector(as.numeric(lambda))
X <- array(matrix(as.numeric(X)), dim = c(n, length(beta)))
#prognostic index
mu = exp (X %*% beta )
#extract first interval baseline hazard
lambda0 <- lambda[1]
#compute relative hazard for each interval respect to the first
rel_base_risk <- lambda/lambda0
rel_risk = lapply(mu, "*" , rel_base_risk)
#caculate duration
if(tau[1] == 0){
dt <- diff(c(tau, 12*10^3))
} else {
dt <- diff(c(0, tau, 12*10^3))
}
assertthat::assert_that(length(dt) == length(lambda))
#create a helping matrix
LD <- matrix(0, nrow = length(tau), ncol = length(rel_base_risk))
LD[lower.tri(LD)] <- 1;
#compute log survival
logsurv <- log(1-runif(n))
#compute log survival for each interval tau
lsm = lapply(rel_risk, function(x) -lambda0 * as.vector(LD %*% (x*dt)))
t <- (rep(NA,n))
#find appropiate time interval
t = mapply(function(x, y, z) {
for (i in seq_along(lambda)) {
t = ifelse(x[i]>=z & z>x[i+1], tau[i] + (x[i] - z)/lambda0/y[i], t)
}
return(t)
} , x = lsm, y = rel_risk , z = as.list(logsurv)
)
sim.data <- data_frame(surv_months = t) %>%
mutate(os_status = ifelse(is.na(surv_months), 'LIVING', 'DECEASED'),
surv_months = ifelse(is.na(surv_months), tau[length(tau)], surv_months),
id = seq(n),
censor_months = rexp(n = n, rate = 1/100))%>%
dplyr::mutate(os_status = ifelse(surv_months < censor_months & os_status != 'LIVING',
'DECEASED', 'LIVING'
),
os_months = ifelse(surv_months < censor_months  & os_status != 'LIVING',
surv_months, censor_months
)
) %>%   cbind(X) %>%
rename("continuos" = "1", "discrete" = "2")
return(sim.data)
}
set.seed(342)
test_n = 100
# tau = c(seq(0, 900, length.out = test_n))
# test_baseline <- exp(-3)*runif(test_n , 0, 1)
tau = c(seq(0, 300, by = 90), seq(300, 800, by = 100))
test_baseline <- exp(-5)*rev(seq(0.1, 1, by = 0.1))
X = matrix(c(rnorm(100), sample(c(0,1), 100, replace = T)), ncol=2)
beta = c(1.5, -2)
sim_data <-  pem_sim_data( beta = beta,
X = X,
tau = tau,
lambda = test_baseline,
n = test_n
)
## plot KM curve from simulated data
sim_data <-
sim_data %>%
dplyr::mutate(os_deceased = os_status == 'DECEASED')
autoplot(survival::survfit(Surv(os_months, os_deceased) ~ 1,
data = sim_data
), conf.int = F) +
ggtitle('Simulated KM curve')
set.seed(342)
test_n = 100
# tau = c(seq(0, 900, length.out = test_n))
# test_baseline <- exp(-3)*runif(test_n , 0, 1)
tau = c(seq(0, 300, by = 90), seq(300, 800, by = 100))
test_baseline <- exp(-3)*rev(seq(0.1, 1, by = 0.1))
X = matrix(c(rnorm(100), sample(c(0,1), 100, replace = T)), ncol=2)
beta = c(1.5, -2)
sim_data <-  pem_sim_data( beta = beta,
X = X,
tau = tau,
lambda = test_baseline,
n = test_n
)
## plot KM curve from simulated data
sim_data <-
sim_data %>%
dplyr::mutate(os_deceased = os_status == 'DECEASED')
autoplot(survival::survfit(Surv(os_months, os_deceased) ~ 1,
data = sim_data
), conf.int = F) +
ggtitle('Simulated KM curve')
set.seed(342)
test_n = 100
# tau = c(seq(0, 900, length.out = test_n))
# test_baseline <- exp(-3)*runif(test_n , 0, 1)
tau = c(seq(0, 300, by = 90), seq(300, 800, by = 100))
test_baseline <- exp(-4)*rev(seq(0.1, 1, by = 0.1))
X = matrix(c(rnorm(100), sample(c(0,1), 100, replace = T)), ncol=2)
beta = c(1.5, -2)
sim_data <-  pem_sim_data( beta = beta,
X = X,
tau = tau,
lambda = test_baseline,
n = test_n
)
## plot KM curve from simulated data
sim_data <-
sim_data %>%
dplyr::mutate(os_deceased = os_status == 'DECEASED')
autoplot(survival::survfit(Surv(os_months, os_deceased) ~ 1,
data = sim_data
), conf.int = F) +
ggtitle('Simulated KM curve')
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warning = FALSE,
fig.width = 6,
fig.height = 6)
set.seed(342)
test_n = 100
# tau = c(seq(0, 900, length.out = test_n))
# test_baseline <- exp(-3)*runif(test_n , 0, 1)
tau = c(seq(0, 300, by = 90), seq(300, 800, by = 100)) #time in months
test_baseline <- exp(-4)*rev(seq(0.1, 1, by = 0.1))
X = matrix(c(rnorm(100), sample(c(0,1), 100, replace = T)), ncol=2)
beta = c(1.5, -2)
sim_data <-  pem_sim_data( beta = beta,
X = X,
tau = tau,
lambda = test_baseline,
n = test_n
)
