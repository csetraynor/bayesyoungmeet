array(rep(TRUE, tmp), dim = tmp)
array(TRUE, dim = length(tmp))
mice.impute.polyreg(y = tmp,
ry = !is.na(tmp),
x = model.matrix(~ prior_glioma + treatment_status +
pretreatment_history + os_months,
data = clinical_data)[,-1],
wy = array(TRUE, dim = length(tmp)))
#using imputation by Bayesian poly regression
tmp <- clinical_data$karnofsky_performance_score
clinical_data$karnofsky_performance_score <- mice.impute.polyreg(y = tmp,
ry = !is.na(tmp),
x = model.matrix(~ prior_glioma + treatment_status +
pretreatment_history + os_months,
data = clinical_data)[,-1],
wy = array(TRUE, dim = length(tmp)))
remove(tmp)
#Near Zero Variance Predictors
nzv <- caret::nearZeroVar(X, saveMetrics= TRUE)
nzv[nzv$nzv,]
mle.surv <- survfit(Surv(os_months, os_deceased) ~ karnofsky_performance_score,
data = clinical_data %>%
mutate(os_deceased = (os_status == "DECEASED")))
require(ggfortify)
ggplot2::autoplot(mle.surv, conf.int = F) +
ggtitle('KM survival for GGM Cohort')
clinical_data <-  tbl_df(getClinicalData(mycgds, case_list))
clinical_data <- clinical_data %>% tibble::rownames_to_column("sample_id")
clinical_data <- clinical_data %>% tibble::rownames_to_column("num_id")
names(clinical_data) <- tolower(names(clinical_data))
remove(clinical_data)
clinical_data <-  tbl_df(getClinicalData(mycgds, case_list))
clinical_data <- clinical_data %>% tibble::rownames_to_column("sample_id")
clinical_data <- clinical_data %>% tibble::rownames_to_column("num_id")
names(clinical_data) <- tolower(names(clinical_data))
convert_blank_to_na <- function(x) {
if(!purrr::is_character(x)){
warning('input variate not character - return original')
return(x)
} else {
ifelse(x == '', NA, x)
}
}
clinical_data <- clinical_data %>%
dplyr::mutate_all(funs(convert_blank_to_na))
clinical_data %>%
filter(is.na(os_status) | os_status == "") %>%
select(os_months, os_status) %>%
glimpse
clinical_data %>%
filter(is.na(os_status) | os_status == "" |os_months < 0 | is.na(os_months)) %>%
select(os_months, os_status) %>%
glimpse
clinical_data %>%
VIM::aggr(prop = FALSE, combined = TRUE, numbers = TRUE, sortVars = TRUE, sortCombs = TRUE)
tmp <- as.factor(clinical_data$karnofsky_performance_score)
head(clinical_data)
tmp <- as.factor(clinical_data$karnofsky_performance_score)
tmp <- mice::mice.impute.polyreg(y = tmp,
ry = !is.na(tmp),
x = model.matrix(~ prior_glioma + treatment_status +
pretreatment_history + os_months,
data = clinical_data)[,-1],
wy = array(TRUE, dim = length(tmp)))
clinical_data$karnofsky_performance_score[is.na(clinical_data$karnofsky_performance_score)] <- tmp[is.na(clinical_data$karnofsky_performance_score)]
clinical_data <-  tbl_df(getClinicalData(mycgds, case_list))
#---- Data Cleaning ----#
clinical_data <- clinical_data %>% tibble::rownames_to_column("sample_id")
clinical_data <- clinical_data %>% tibble::rownames_to_column("num_id")
names(clinical_data) <- tolower(names(clinical_data))
#convert missig values into NA
convert_blank_to_na <- function(x) {
if(!purrr::is_character(x)){
warning('input variate not character - return original')
return(x)
} else {
ifelse(x == '', NA, x)
}
}
clinical_data <- clinical_data %>%
dplyr::mutate_all(funs(convert_blank_to_na))
#--Missing Data ---#
clinical_data %>%
filter(is.na(os_status) | os_status == "") %>%
select(os_months, os_status) %>%
glimpse
clinical_data %>%
filter(is.na(os_status) | os_status == "" |os_months < 0 | is.na(os_months)) %>%
select(os_months, os_status) %>%
clinical_data %>%
filter(is.na(os_status) | os_status == "" |os_months < 0 | is.na(os_months)) %>%
select(os_months, os_status) %>%
glimpse
VIM::marginplot(clinical_data[c("os_months","karnofsky_performance_score")])
tmp <- as.factor(clinical_data$karnofsky_performance_score)
tmp <- mice::mice.impute.polyreg(y = tmp,
ry = !is.na(tmp),
x = model.matrix(~ prior_glioma + treatment_status +
pretreatment_history + os_months,
data = clinical_data)[,-1],
wy = array(TRUE, dim = length(tmp)))
tmp[is.na(clinical_data$karnofsky_performance_score)]
remove(tmp)
clinical_data$karnofsky_performance_score[is.na(clinical_data$karnofsky_performance_score)]
clinical_data$karnofsky_performance_score[is.na(clinical_data$karnofsky_performance_score)] <- tmp[is.na(clinical_data$karnofsky_performance_score)]
tmp <- as.factor(clinical_data$karnofsky_performance_score)
tmp <- mice::mice.impute.polyreg(y = tmp,
ry = !is.na(tmp),
x = model.matrix(~ prior_glioma + treatment_status +
pretreatment_history + os_months,
data = clinical_data)[,-1],
wy = array(TRUE, dim = length(tmp)))
clinical_data$karnofsky_performance_score[is.na(clinical_data$karnofsky_performance_score)] <- tmp[is.na(clinical_data$karnofsky_performance_score)]
remove(tmp)
clinical_data$karnofsky_performance_score <- as.factor(clinical_data$karnofsky_performance_score)
Xdummies <- caret::dummyVars(Surv(os_months, os_deceased) ~ karnofsky_performance_score,
data =  clinical_data %>%
mutate(os_deceased = (os_status == "DECEASED")))
X <- tbl_df(predict(Xdummies, newdata =  clinical_data %>%
mutate(os_deceased = (os_status == "DECEASED"))))
nzv <- caret::nearZeroVar(X, saveMetrics= TRUE)
nzv[nzv$nzv,]
mle.surv <- survfit(Surv(os_months, os_deceased) ~ karnofsky_performance_score,
data = clinical_data %>%
mutate(os_deceased = (os_status == "DECEASED")))
require(ggfortify)
ggplot2::autoplot(mle.surv, conf.int = F) +
ggtitle('KM survival for GGM Cohort')
mle.surv <- survfit(Surv(os_months, os_deceased) ~ karnofsky_performance_score,
data = clinical_data %>%
mutate(os_deceased = (os_status == "DECEASED")))
require(ggfortify)
ggplot2::autoplot(mle.surv, conf.int = F) +
ggtitle('KM survival for GGM Cohort')
#joint covariates lower than 60
X <- X %>% mutate(kpsless_or60 = (karnofsky_performance_score.40 | karnofsky_performance_score.60)) %>%
rename(kps80 = karnofsky_performance_score.80, kps100 = karnofsky_performance_score.100) %>%
select(-karnofsky_performance_score.40, -karnofsky_performance_score.60) %>%
mutate_all(funs(as.integer))
#Double check near Zero Variance Predictors
nzv <- caret::nearZeroVar(X, saveMetrics= TRUE)
nzv[nzv$nzv,]
clinical_data <- clinical_data %>%
select(sample_id, num_id, os_months, os_status) %>%
cbind(X)
gen_stan_data <- function(data, formula = as.formula(~1)) {
if(!inherits(formula, 'formula'))
formula <- as.formula(formula)
#set the tau interval times
tau <- data %>% select(os_months) %>% unlist %>% unique %>% sort()
if(tau[1] != 0){
tau <- c(0, tau)
}
longdata <- survival::survSplit(Surv(time = os_months,
event = deceased) ~ . ,
cut = tau, data = (data %>%
mutate(deceased = os_status == "DECEASED")))
#create time point id
longdata <- longdata %>%
group_by(sample_id) %>%
mutate(t_id = seq(n())) %>%
ungroup()
t_obs <- data %>% select(os_months) %>% unlist %>% unique %>% sort()
t_dur <- diff(tau)
X_bg <- longdata %>%
model.matrix(formula, data = .)
M_bg <- ncol(X_bg)
if (M_bg > 1){
if("(Intercept)" %in% colnames(X_bg))
X_bg <- array(X_bg[,-1], dim = c(nrow(longdata), M_bg - 1))
M_bg <- ncol(X_bg)
}
stan_data <- list(
N = nrow(longdata),
S = length(unique(longdata$num_id)),
"T" = dplyr::n_distinct(longdata$t_id),
s = as.integer(longdata$num_id),
t_obs = t_obs,
t_dur = t_dur,
M = M_bg,
event = as.integer(longdata$deceased),
t = longdata$t_id,
x = X_bg
)
}
gen_inits <-  function(M) {
function()
list(
beta_bg_raw = array(rnorm(M), dim =M),
tau_s_bg_raw = 0.1*abs(rnorm(1)),
tau_bg_raw = array(abs(rnorm(M)), dim = M),
c_raw = abs(rnorm(1)),
r_raw = abs(rnorm(1)),
baseline = rgamma(n = length(diff(tau)), shape =  mean(diff(tau)) * 0.1, scale = 0.01)
)
}
nChain <- 2
stanfile <- 'pem_bg_up.stan'
rstan_options(auto_write = TRUE)
head@(clinical_data)
head(clinical_data)
pem_fit <- stan(stanfile,
data = gen_stan_data(clinical_data,
'~ kpsless_or60 +
kps80 + kps100'),
init = gen_inits(M=3),
iter = 1000,
cores = min(nChain, parallel::detectCores()),
seed = 7327,
#control = list(adapt_delta = 0.99, max_treedepth = 15
chains = nChain,
pars = c("beta_bg", "baseline", "lp__"))
#---Set initial values---#
gen_inits <- function(M) {
function()
list(
log_baseline_raw = rnorm(n= length(t_dur)),
sigma_baseline = runif(1, 0.01, 100),
log_baseline_mu = rnorm(1),
beta_bg_raw = rnorm(M),
tau_s_bg_raw = 0.1*abs(rnorm(1)),
tau_bg_raw = abs(rnorm(M))
)
}
pem_fit <- stan(stanfile,
data = gen_stan_data(clinical_data,
'~ kpsless_or60 +
kps80 + kps100'),
init = gen_inits(M=3),
iter = 1000,
cores = min(nChain, parallel::detectCores()),
seed = 7327,
#control = list(adapt_delta = 0.99, max_treedepth = 15
chains = nChain,
pars = c("beta_bg", "baseline", "lp__"))
gen_stan_data <- function(data, formula = as.formula(~1)) {
if(!inherits(formula, 'formula'))
formula <- as.formula(formula)
#set the tau interval times
tau <- data %>% select(os_months) %>% unlist %>% unique %>% sort()
if(tau[1] != 0){
tau <- c(0, tau)
}
longdata <- survival::survSplit(Surv(time = os_months,
event = deceased) ~ . ,
cut = tau, data = (data %>%
mutate(deceased = os_status == "DECEASED")))
#create time point id
longdata <- longdata %>%
group_by(sample_id) %>%
mutate(t_id = seq(n())) %>%
ungroup()
t_obs <- data %>% select(os_months) %>% unlist %>% unique %>% sort()
t_dur <- diff(tau)
X_bg <- longdata %>%
model.matrix(formula, data = .)
M_bg <- ncol(X_bg)
if (M_bg > 1){
if("(Intercept)" %in% colnames(X_bg))
X_bg <- array(X_bg[,-1], dim = c(nrow(longdata), M_bg - 1))
M_bg <- ncol(X_bg)
}
stan_data <- list(
N = nrow(longdata),
S = length(unique(longdata$num_id)),
"T" = dplyr::n_distinct(longdata$t_id),
s = as.integer(longdata$num_id),
log_t_dur = array(log(t_dur), dim = length(t_dur)),
M = M_bg,
status = as.integer(longdata$deceased),
t = longdata$t_id,
x = X_bg
)
}
nChain <- 2
stanfile <- 'pem_bg_up.stan'
rstan_options(auto_write = TRUE)
pem_fit <- stan(stanfile,
data = gen_stan_data(clinical_data,
'~ kpsless_or60 +
kps80 + kps100'),
init = gen_inits(M=3),
iter = 1000,
cores = min(nChain, parallel::detectCores()),
seed = 7327,
#control = list(adapt_delta = 0.99, max_treedepth = 15
chains = nChain,
pars = c("beta_bg", "baseline", "lp__"))
pem_fit <- stan(stanfile,
data = gen_stan_data(clinical_data,
'~ kpsless_or60 +
kps80 + kps100'),
init = gen_inits(M=3),
iter = 1000,
cores = min(nChain, parallel::detectCores()),
seed = 7327,
#control = list(adapt_delta = 0.99, max_treedepth = 15
chains = nChain,
pars = c("beta_bg", "log_baseline", "lp__"))
tau <- clinical_data %>% select(os_months) %>% unlist %>% unique %>% sort()
if(tau[1] != 0){
tau <- c(0, tau)
}
t_dur <- diff(tau)
gen_inits <- function(M) {
function()
list(
log_baseline_raw = rnorm(n= length(t_dur)),
sigma_baseline = runif(1, 0.01, 100),
log_baseline_mu = rnorm(1),
beta_bg_raw = rnorm(M),
tau_s_bg_raw = 0.1*abs(rnorm(1)),
tau_bg_raw = abs(rnorm(M))
)
}
nChain <- 2
stanfile <- 'pem_bg_up.stan'
rstan_options(auto_write = TRUE)
pem_fit <- stan(stanfile,
data = gen_stan_data(clinical_data,
'~ kpsless_or60 +
kps80 + kps100'),
init = gen_inits(M=3),
iter = 1000,
cores = min(nChain, parallel::detectCores()),
seed = 7327,
#control = list(adapt_delta = 0.99, max_treedepth = 15
chains = nChain,
pars = c("beta_bg", "log_baseline", "lp__"))
print(pem_fit)
head(clinical_data)
tmp <- createDataPartition(y = clinical_data$os_status, p=0.8, list = FALSE)
train <- clinical_data[tmp,]
test <- clinical_data[-tmp]
#-----Run Stan-------#
nChain <- 1
stanfile <- 'pem_bg_up.stan'
rstan_options(auto_write = TRUE)
pem_fit <- stan(stanfile,
data = gen_stan_data(train,
'~ kpsless_or60 +
kps80 + kps100'),
init = gen_inits(M=3),
iter = 1000,
cores = min(nChain, parallel::detectCores()),
seed = 7327,
#control = list(adapt_delta = 0.99, max_treedepth = 15
chains = nChain,
pars = c("beta_bg", "log_baseline", "lp__"))
tau <- train %>% select(os_months) %>% unlist %>% unique %>% sort()
if(tau[1] != 0){
tau <- c(0, tau)
}
t_dur <- diff(tau)
gen_inits <- function(M) {
function()
list(
log_baseline_raw = rnorm(n= length(t_dur)),
sigma_baseline = runif(1, 0.01, 100),
log_baseline_mu = rnorm(1),
beta_bg_raw = rnorm(M),
tau_s_bg_raw = 0.1*abs(rnorm(1)),
tau_bg_raw = abs(rnorm(M))
)
}
nChain <- 1
stanfile <- 'pem_bg_up.stan'
rstan_options(auto_write = TRUE)
gen_inits <- function(M, data) {
tau <- data %>% select(os_months) %>% unlist %>% unique %>% sort()
if(tau[1] != 0){
tau <- c(0, tau)
}
t_dur <- diff(tau)
function()
list(
log_baseline_raw = rnorm(n= length(t_dur)),
sigma_baseline = runif(1, 0.01, 100),
log_baseline_mu = rnorm(1),
beta_bg_raw = rnorm(M),
tau_s_bg_raw = 0.1*abs(rnorm(1)),
tau_bg_raw = abs(rnorm(M))
)
}
nChain <- 1
stanfile <- 'pem_bg_up.stan'
rstan_options(auto_write = TRUE)
pem_fit <- stan(stanfile,
data = gen_stan_data(train,
'~ kpsless_or60 +
kps80 + kps100'),
init = gen_inits(M=3, train),
iter = 1000,
cores = min(nChain, parallel::detectCores()),
seed = 7327,
#control = list(adapt_delta = 0.99, max_treedepth = 15
chains = nChain,
pars = c("beta_bg", "log_baseline", "lp__"))
print(pem_fit)
rstan::traceplot(pem_fit, 'beta_bg')
rstan::traceplot(pem_fit, 'lp__')
1/(50*50)
pp_predict_surv <- function(pp_beta, pp_lambda, n, tau, X,
level = 0.9,
plot = F, data = NULL,
sim_data_fun = pem_sim_data) {
pp_newdata <-
purrr::pmap(list(pp_lambda, pp_beta),
function(a, b) {pem_sim_data(lambda = a,
beta = b,
tau = tau,
n = n,
X = X)} )
pp_survdata <-
pp_newdata %>%
purrr::map(~ dplyr::mutate(., os_deceased = os_status == 'DECEASED')) %>%
purrr::map(~ survival::survfit(Surv(os_months, os_deceased) ~ 1, data = .)) %>%
purrr::map(fortify)
## compute quantiles given level
lower_p <- 0 + ((1 - level)/2)
upper_p <- 1 - ((1 - level)/2)
pp_survdata_agg <-
pp_survdata %>%
purrr::map(~ dplyr::mutate(.,
time_group = floor(time))) %>%
dplyr::bind_rows() %>%
dplyr::group_by(time_group) %>%
dplyr::summarize(surv_mean = mean(surv)
, surv_p50 = median(surv)
, surv_lower = quantile(surv,
probs = lower_p)
, surv_upper = quantile(surv,
probs = upper_p) ) %>%
dplyr::ungroup()
if (plot == FALSE) {
return(pp_survdata_agg)
}
ggplot_data <- pp_survdata_agg %>%
dplyr::mutate(type = 'posterior predicted values') %>%
dplyr::rename(surv = surv_p50,
lower = surv_lower,
upper = surv_upper, time = time_group)
if (!is.null(data))
ggplot_data <-
ggplot_data %>%
bind_rows(
fortify(
survival::survfit(
Surv(os_months, os_deceased) ~ 1,
data = data %>%
dplyr::mutate(
os_deceased = os_status == 'DECEASED') )) %>%
dplyr::mutate(lower = surv,
upper = surv, type = 'actual data') )
pl <- ggplot(ggplot_data,
aes(x = time, group = type, linetype = type)) +
geom_line(aes(y = surv, colour = type)) +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2)
pl
}
pp_beta_bg <- as.data.frame.array(rstan::extract(pem_fit,pars = 'beta_bg', permuted = TRUE)$beta_bg)
pp_lambda <- as.data.frame.array(rstan::extract(pem_fit,pars = 'log_baseline', permuted = TRUE)$log_baseline)
pp_lambda <- apply(pp_lambda, 2, exp)
pp_beta_bg <-  split(pp_beta_bg, seq(nrow(pp_beta_bg)))
pp_lambda <-  split(pp_lambda, seq(nrow(pp_lambda)))
Xdummies <- dummyVars(Surv(os_months, os_deceased) ~ age +
g.cimp_methylation + idh1_status +
mgmt_status, data =  glio_clin_dat %>%
mutate(os_deceased = (os_status == "DECEASED")))
head(train)
head(train[5:7,])
head(train[,5:7])
X <- train[,5:7]
tau <- data %>% select(os_months) %>% unlist %>% unique %>% sort()
tau <- train %>% select(os_months) %>% unlist %>% unique %>% sort()
pl <- pp_predict_surv(pp_beta = pp_beta,
pp_lambda = pp_baseline,
n = nrow(train),
tau = train %>% select(os_months) %>% unlist %>% unique %>% sort(),
X = X,
level = 0.9,
plot = T,
data = train)
pl <- pp_predict_surv(pp_beta = pp_beta,
pp_lambda = pp_lambda,
n = nrow(train),
tau = train %>% select(os_months) %>% unlist %>% unique %>% sort(),
X = X,
level = 0.9,
plot = T,
data = train)
pl <- pp_predict_surv(pp_beta = pp_beta_bg,
pp_lambda = pp_lambda,
n = nrow(train),
tau = train %>% select(os_months) %>% unlist %>% unique %>% sort(),
X = X,
level = 0.9,
plot = T,
data = train)
X <- as.matrix(train[,5:7])
tau <- train %>% select(os_months) %>% unlist %>% unique %>% sort()
pl <- pp_predict_surv(pp_beta = pp_beta_bg,
pp_lambda = pp_lambda,
n = nrow(train),
tau = train %>% select(os_months) %>% unlist %>% unique %>% sort(),
X = X,
level = 0.9,
plot = T,
data = train)
pl +
xlim(NA, 250) +
ggtitle('Posterior predictive checks \nfit to GBC 2008 historical cohort; showing 90% CI')
