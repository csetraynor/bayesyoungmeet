arrange(id, os_months)
longdata <- longdata %>%
group_by(id) %>%
mutate(t = seq(n())) %>%
ungroup()
#----Generate stan data----#
M = length(test_beta)
gen_stan_data <- function(data){
stan_data <- list(
N = nrow(data),
S = length(unique(longdata$t)),
"T" = dplyr::n_distinct(data$t),
s = array(as.integer(data$id)),
t = data$t,
M=M,
event = as.integer(data$deceased),
obs_t = data$os_months,
x = array(matrix(c(data$continuos, data$discrete), ncol=M), dim=c(nrow(data), M))
)
}
glimpse(gen_stan_data(longdata))
test_n = 100
test_tau = c(seq(0, 1200, length.out = test_n))
test_baseline <- exp(-3)*runif(test_n - 1 , 0, 1)
# tau = c(seq(0, 300, by = 90), seq(300, 800, by = 100)) #time in months
# test_baseline <- exp(-4)*rev(seq(0.1, 1, by = 0.1))
X = matrix(c(rnorm(100), sample(c(0,1), 100, replace = T)), ncol=2)
test_beta = c(1, 0.5)
sim_data <-  pem_sim_data( beta = test_beta,
X = X,
tau = test_tau,
lambda = test_baseline,
n = test_n
)
## plot KM curve from simulated data
sim_data <-
sim_data %>%
dplyr::mutate(os_deceased = os_status == 'DECEASED')
autoplot(survival::survfit(Surv(os_months, os_deceased) ~ 1,
data = sim_data
), conf.int = F) +
ggtitle('Simulated KM curve')
#------ long data format ----#
#set the tau interval times
tau <- sim_data %>% select(os_months) %>% unlist %>% unique %>%
sort()
if(tau[1] != 0){
tau <- c(0, tau)
}
#set t_obs
t_obs <- as.numeric(sim_data %>% select(os_months) %>% unlist %>% sort())
t_dur <- diff(c(0, t_obs))
longdata <- survival::survSplit(Surv(time = os_months, event = deceased) ~ . ,
cut = tau, data = (sim_data %>%
mutate(deceased = os_status == "DECEASED"))) %>%
arrange(id, os_months)
#create time point id
longdata <- longdata %>%
group_by(id) %>%
mutate(t = seq(n()),
t_dur = os_months - tstart) %>%
ungroup()
#----Generate stan data----#
M = length(test_beta)
gen_stan_data <- function(data){
stan_data <- list(
N = nrow(data),
S = length(unique(longdata$t)),
"T" = dplyr::n_distinct(data$t),
M=M,
s = array(as.integer(data$id)),
t = data$t,
event = as.integer(data$deceased),
x = array(matrix(c(data$continuos, data$discrete), ncol=M), dim=c(nrow(data), M)),
t_obs = t_obs,
t_dur = t_dur
)
}
glimpse(gen_stan_data(longdata))
set.seed(342)
test_n = 100
test_tau = c(seq(0, 1200, length.out = test_n))
test_baseline <- exp(-3)*runif(test_n - 1 , 0, 1)
# tau = c(seq(0, 300, by = 90), seq(300, 800, by = 100)) #time in months
# test_baseline <- exp(-4)*rev(seq(0.1, 1, by = 0.1))
X = matrix(c(rnorm(100), sample(c(0,1), 100, replace = T)), ncol=2)
test_beta = c(0.5, 1)
sim_data <-  pem_sim_data( beta = test_beta,
X = X,
tau = test_tau,
lambda = test_baseline,
n = test_n
)
## plot KM curve from simulated data
sim_data <-
sim_data %>%
dplyr::mutate(os_deceased = os_status == 'DECEASED')
autoplot(survival::survfit(Surv(os_months, os_deceased) ~ 1,
data = sim_data
), conf.int = F) +
ggtitle('Simulated KM curve')
#set the tau interval times
tau <- sim_data %>% select(os_months) %>% unlist %>% unique %>%
sort()
if(tau[1] != 0){
tau <- c(0, tau)
}
#set t_obs
t_obs <- as.numeric(sim_data %>% select(os_months) %>% unlist %>% sort())
t_dur <- diff(c(0, t_obs))
longdata <- survival::survSplit(Surv(time = os_months, event = deceased) ~ . ,
cut = tau, data = (sim_data %>%
mutate(deceased = os_status == "DECEASED"))) %>%
arrange(id, os_months)
#create time point id
longdata <- longdata %>%
group_by(id) %>%
mutate(t = seq(n()),
t_dur = os_months - tstart) %>%
ungroup()
#----Generate stan data----#
M = length(test_beta)
gen_stan_data <- function(data){
stan_data <- list(
N = nrow(data),
S = length(unique(longdata$t)),
"T" = dplyr::n_distinct(data$t),
M=M,
s = array(as.integer(data$id)),
t = data$t,
event = as.integer(data$deceased),
x = array(matrix(c(data$continuos, data$discrete), ncol=M), dim=c(nrow(data), M)),
t_obs = t_obs,
t_dur = t_dur
)
}
#---Set initial values---#
gen_inits <- function() {
list(
beta = rcauchy(M, location = 0 , scale = 2),
log_baseline_mu = rnorm(1),
baseline_sigma = abs(rnorm(1)),
log_baseline_raw = rnorm(length(t_dur))
)
}
nChain <- 4
stanfile <- 'pem_unstructured.stan'
rstan_options(auto_write = TRUE)
simulated_fit <- stan(stanfile,
data = gen_stan_data(longdata),
init = gen_inits,
iter = 1000,
cores = min(nChain, parallel::detectCores()),
seed = 7327,
chains = nChain,
pars = c("beta", "baseline", "lp__")
#control = list(adapt_delta = 0.9, max_treedepth = 15)
)
#set the tau interval times
tau <- sim_data %>% filter(os_status == "DECEASED") %>% select(os_months) %>% unlist %>% unique %>%
sort()
if(tau[1] != 0){
tau <- c(0, tau)
}
t_obs <- as.numeric(sim_data %>% select(os_months) %>% unlist %>% sort())
t_dur <- diff(c(0, t_obs))
longdata <- survival::survSplit(Surv(time = os_months, event = deceased) ~ . ,
cut = tau, data = (sim_data %>%
mutate(deceased = os_status == "DECEASED"))) %>%
arrange(id, os_months)
#create time point id
longdata <- longdata %>%
group_by(id) %>%
mutate(t = seq(n()),
t_dur = os_months - tstart) %>%
ungroup()
#----Generate stan data----#
M = length(test_beta)
gen_stan_data <- function(data){
stan_data <- list(
N = nrow(data),
S = length(unique(longdata$t)),
"T" = dplyr::n_distinct(data$t),
M=M,
s = array(as.integer(data$id)),
t = data$t,
event = as.integer(data$deceased),
x = array(matrix(c(data$continuos, data$discrete), ncol=M), dim=c(nrow(data), M)),
t_obs = t_obs,
t_dur = t_dur
)
}
#---Set initial values---#
gen_inits <- function() {
list(
beta = rcauchy(M, location = 0 , scale = 2),
log_baseline_mu = rnorm(1),
baseline_sigma = abs(rnorm(1)),
log_baseline_raw = rnorm(length(t_dur))
)
}
#-----Run Stan-------#
nChain <- 4
stanfile <- 'pem_unstructured.stan'
rstan_options(auto_write = TRUE)
simulated_fit <- stan(stanfile,
data = gen_stan_data(longdata),
init = gen_inits,
iter = 1000,
cores = min(nChain, parallel::detectCores()),
seed = 7327,
chains = nChain,
pars = c("beta", "baseline", "lp__")
#control = list(adapt_delta = 0.9, max_treedepth = 15)
)
glimpse(gen_stan_data(longdata))
gen_stan_data <- function(data){
stan_data <- list(
N = nrow(data),
S = length(unique(longdata$id)),
"T" = dplyr::n_distinct(data$t),
M=M,
s = array(as.integer(data$id)),
t = data$t,
event = as.integer(data$deceased),
x = array(matrix(c(data$continuos, data$discrete), ncol=M), dim=c(nrow(data), M)),
t_obs = t_obs,
t_dur = t_dur
)
}
glimpse(gen_stan_data(longdata))
gen_stan_data <- function(data){
stan_data <- list(
N = nrow(data),
S = length(unique(longdata$id)),
"T" = dplyr::n_distinct(data$id),
M=M,
s = array(as.integer(data$id)),
t = data$t,
event = as.integer(data$deceased),
x = array(matrix(c(data$continuos, data$discrete), ncol=M), dim=c(nrow(data), M)),
t_obs = t_obs,
t_dur = t_dur
)
}
glimpse(gen_stan_data(longdata))
gen_inits <- function() {
list(
beta = rcauchy(M, location = 0 , scale = 2),
log_baseline_mu = rnorm(1),
baseline_sigma = abs(rnorm(1)),
log_baseline_raw = rnorm(length(t_dur))
)
}
#-----Run Stan-------#
nChain <- 4
stanfile <- 'pem_unstructured.stan'
rstan_options(auto_write = TRUE)
simulated_fit <- stan(stanfile,
data = gen_stan_data(longdata),
init = gen_inits,
iter = 1000,
cores = min(nChain, parallel::detectCores()),
seed = 7327,
chains = nChain,
pars = c("beta", "baseline", "lp__")
#control = list(adapt_delta = 0.9, max_treedepth = 15)
)
rstan::traceplot(simulated_fit, 'lp__')
rstan::traceplot(simulated_fit, 'beta')
pp_beta1 <- rstan::extract(simulated_fit,'beta[1]')$beta
pp_beta2 <- rstan::extract(simulated_fit,'beta[2]')$beta
ggplot(data.frame(beta1 = pp_beta1, beta2 = pp_beta2)) +
geom_density(aes(x = beta1)) +
geom_vline(aes(xintercept = test_beta[1]), colour = 'red') +
ggtitle('Posterior distribution of beta 1\nshowing true value in red')
ggplot(data.frame(beta1 = pp_beta1, beta2 = pp_beta2)) +
geom_density(aes(x = beta2)) +
geom_vline(aes(xintercept = test_beta[2]), colour = 'red') +
ggtitle('Posterior distribution of beta 2\nshowing true value in red')
ggplot(data.frame(beta1 = pp_beta1, beta2 = pp_beta2)) +
geom_density2d(aes(x = beta1, y = beta2)) +
geom_point(aes(x = test_beta[1], y = test_beta[2]), colour = 'red', size = 2) +
ggtitle('Posterior distributions of beta\nshowing true parameter values in red')
#Compute probability of seeing a value beta1 >=1.5
mean(pp_beta1 >= test_beta[1])
#Compute probability of seeing a value beta1 >=-2
mean(pp_beta2 >= test_beta[2])
#Joint probability
mean(pp_beta1 >= test_beta[1] & pp_beta2 >= test_beta[2])
pp_beta_bg <- as.data.frame.array(rstan::extract(simulated_fit,pars = 'beta', permuted = TRUE)$beta)
pp_lambda <- as.data.frame.array(rstan::extract(simulated_fit,pars = 'baseline', permuted = TRUE)$baseline)
# create list
pp_beta_bg <-  split(pp_beta_bg, seq(nrow(pp_beta_bg)))
pp_lambda <-  split(pp_lambda, seq(nrow(pp_lambda)))
pp_newdata <-
purrr::pmap(list(pp_beta_bg, pp_lambda),
function(pp_beta, pp_lambda) {pem_sim_data(lambda = pp_lambda,
beta = pp_beta,
tau = tau,
n = test_n,
X = X)
} )
longdata <- survival::survSplit(Surv(time = os_months, event = deceased) ~ . ,
cut = test_tau, data = (sim_data %>%
mutate(deceased = os_status == "DECEASED"))) %>%
arrange(id, os_months)
pp_lambda
longdata <- survival::survSplit(Surv(time = os_months, event = deceased) ~ . ,
cut = test_tau, data = (sim_data %>%
mutate(deceased = os_status == "DECEASED"))) %>%
arrange(id, os_months)
#create time point id
longdata <- longdata %>%
group_by(id) %>%
mutate(t = seq(n()),
t_dur = os_months - tstart) %>%
ungroup()
#----Generate stan data----#
M = length(test_beta)
gen_stan_data <- function(data){
stan_data <- list(
N = nrow(data),
S = length(unique(longdata$id)),
"T" = dplyr::n_distinct(data$id),
M=M,
s = array(as.integer(data$id)),
t = data$t,
event = as.integer(data$deceased),
x = array(matrix(c(data$continuos, data$discrete), ncol=M), dim=c(nrow(data), M)),
t_obs = t_obs,
t_dur = t_dur
)
}
glimpse(gen_stan_data(longdata))
---Set initial values---#
gen_inits <- function() {
list(
beta = rcauchy(M, location = 0 , scale = 2),
log_baseline_mu = rnorm(1),
baseline_sigma = abs(rnorm(1)),
log_baseline_raw = rnorm(length(t_dur))
)
}
#-----Run Stan-------#
nChain <- 4
stanfile <- 'pem_unstructured.stan'
rstan_options(auto_write = TRUE)
simulated_fit <- stan(stanfile,
data = gen_stan_data(longdata),
init = gen_inits,
iter = 1000,
cores = min(nChain, parallel::detectCores()),
seed = 7327,
chains = nChain,
pars = c("beta", "baseline", "lp__")
#control = list(adapt_delta = 0.9, max_treedepth = 15)
)
nChain <- 1
stanfile <- 'pem_unstructured.stan'
rstan_options(auto_write = TRUE)
simulated_fit <- stan(stanfile,
data = gen_stan_data(longdata),
init = gen_inits,
iter = 1000,
cores = min(nChain, parallel::detectCores()),
seed = 7327,
chains = nChain,
pars = c("beta", "baseline", "lp__")
#control = list(adapt_delta = 0.9, max_treedepth = 15)
)
nChain <- 4
stanfile <- 'pem_unstructured.stan'
rstan_options(auto_write = TRUE)
simulated_fit <- stan(stanfile,
data = gen_stan_data(longdata),
init = gen_inits,
iter = 1000,
cores = min(nChain, parallel::detectCores()),
seed = 7327,
chains = nChain,
pars = c("beta", "baseline", "lp__")
#control = list(adapt_delta = 0.9, max_treedepth = 15)
)
simulated_fit <- stan(stanfile,
data = gen_stan_data(longdata),
init = gen_inits,
iter = 1000,
cores = min(nChain, parallel::detectCores()),
seed = 7327,
chains = nChain,
pars = c("beta", "baseline", "lp__")
#control = list(adapt_delta = 0.9, max_treedepth = 15)
)
simulated_fit <- stan(stanfile,
data = gen_stan_data(longdata),
init = gen_inits,
iter = 1000,
cores = min(nChain, parallel::detectCores()),
seed = 7327,
chains = nChain,
pars = c("beta", "baseline", "lp__")
#control = list(adapt_delta = 0.9, max_treedepth = 15)
)
#----Convergence review -----#
print(simulated_fit)
pairs(simulated_fit, pars = c("lp__", "beta"), las = 1)
rstan::traceplot(simulated_fit, 'lp__')
rstan::traceplot(simulated_fit, 'beta')
pp_beta1 <- rstan::extract(simulated_fit,'beta[1]')$beta
pp_beta2 <- rstan::extract(simulated_fit,'beta[2]')$beta
ggplot(data.frame(beta1 = pp_beta1, beta2 = pp_beta2)) +
geom_density(aes(x = beta1)) +
geom_vline(aes(xintercept = test_beta[1]), colour = 'red') +
ggtitle('Posterior distribution of beta 1\nshowing true value in red')
ggplot(data.frame(beta1 = pp_beta1, beta2 = pp_beta2)) +
geom_density(aes(x = beta2)) +
geom_vline(aes(xintercept = test_beta[2]), colour = 'red') +
ggtitle('Posterior distribution of beta 2\nshowing true value in red')
ggplot(data.frame(beta1 = pp_beta1, beta2 = pp_beta2)) +
geom_density2d(aes(x = beta1, y = beta2)) +
geom_point(aes(x = test_beta[1], y = test_beta[2]), colour = 'red', size = 2) +
ggtitle('Posterior distributions of beta\nshowing true parameter values in red')
mean(pp_beta1 >= test_beta[1])
#Compute probability of seeing a value beta1 >=-2
mean(pp_beta2 >= test_beta[2])
#Joint probability
mean(pp_beta1 >= test_beta[1] & pp_beta2 >= test_beta[2])
pp_beta_bg <- as.data.frame.array(rstan::extract(simulated_fit,pars = 'beta', permuted = TRUE)$beta)
pp_lambda <- as.data.frame.array(rstan::extract(simulated_fit,pars = 'baseline', permuted = TRUE)$baseline)
pp_beta_bg <-  split(pp_beta_bg, seq(nrow(pp_beta_bg)))
pp_lambda <-  split(pp_lambda, seq(nrow(pp_lambda)))
pp_newdata <-
purrr::pmap(list(pp_beta_bg, pp_lambda),
function(pp_beta, pp_lambda) {pem_sim_data(lambda = pp_lambda,
beta = pp_beta,
tau = tau,
n = test_n,
X = X)
} )
pp_newdata <-
purrr::pmap(list(pp_beta_bg, pp_lambda),
function(pp_beta, pp_lambda) {pem_sim_data(lambda = pp_lambda,
beta = pp_beta,
tau = test_tau,
n = test_n,
X = X)
} )
pp_lambda
length(test_tau)
test_tau
pp_newdata <-
purrr::pmap(list(pp_beta_bg, pp_lambda),
function(pp_beta, pp_lambda) {pem_sim_data(lambda = pp_lambda,
beta = pp_beta,
tau = c(test_tau, Inf),
n = test_n,
X = X)
} )
ggplot(pp_newdata %>%
dplyr::bind_rows() %>%
dplyr::mutate(type = 'posterior predicted values') %>%
bind_rows(sim_data %>% dplyr::mutate(type = 'actual data'))
, aes(x = os_months, group = os_status, colour = os_status, fill = os_status)) +
geom_density(alpha = 0.5) +
facet_wrap(~type, ncol = 1)
## ----sim-pp-survdata-----------------------------------------------------
## cumulative survival rate for each posterior draw
pp_survdata <-
pp_newdata %>%
purrr::map(~ dplyr::mutate(., os_deceased = os_status == 'DECEASED')) %>%
purrr::map(~ survival::survfit(Surv(os_months, os_deceased) ~ 1, data = .)) %>%
purrr::map(fortify)
## summarize cum survival for each unit time (month), summarized at 95% confidence interval
pp_survdata_agg <-
pp_survdata %>%
purrr::map(~ dplyr::mutate(., time_group = floor(time))) %>%
dplyr::bind_rows() %>%
dplyr::group_by(time_group) %>%
dplyr::summarize(surv_mean = mean(surv)
, surv_p50 = median(surv)
, surv_lower = quantile(surv, probs = 0.025)
, surv_upper = quantile(surv, probs = 0.975)
) %>%
dplyr::ungroup()
## km-curve for test data
test_data_kmcurve <-
fortify(
survival::survfit(
Surv(os_months, os_deceased) ~ 1,
data = sim_data %>%
dplyr::mutate(os_deceased = os_status == 'DECEASED')
)) %>%
dplyr::mutate(lower = surv, upper = surv)
ggplot(pp_survdata_agg %>%
dplyr::mutate(type = 'posterior predicted values') %>%
dplyr::rename(surv = surv_p50, lower = surv_lower, upper = surv_upper, time = time_group) %>%
bind_rows(test_data_kmcurve %>% dplyr::mutate(type = 'actual data')),
aes(x = time, group = type, linetype = type)) +
geom_line(aes(y = surv, colour = type)) +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) +
xlim(c(0, 250))
#----Convergence review -----#
print(simulated_fit)
runif(test_n - 1 , 0, 1)
autoplot(survival::survfit(Surv(os_months, os_deceased) ~ 1,
data = sim_data
), conf.int = F) +
ggtitle('Simulated KM curve')
#------ long
View
View(longdata)
